import streamlit as st
import pandas as pd
import numpy as np
import openpyxl
import glob
import os
import io
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç—á–µ—Ç–æ–≤ –ò–ü–ü–°–£",
    page_icon="üìä",
    layout="wide"
)

st.title("üìä –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç—á–µ—Ç–æ–≤ –ò–ü–ü–°–£")
st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")

# –§—É–Ω–∫—Ü–∏–∏ –∏–∑ –≤–∞—à–µ–≥–æ –∫–æ–¥–∞
def create_mini_df(df, start, end):
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏-–¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ"""
    mini_df = df.loc[start:end].copy()
    first_index = mini_df.index[0]
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —É–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
    mini_df.columns = mini_df.iloc[0]
    mini_df = mini_df.drop(first_index).reset_index(drop=True)
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã–µ —Å—Ç–æ–ª–±—Ü—ã
    mini_df = mini_df.dropna(axis=1, how='all')
    
    return mini_df

def create_num_names_services(mini_df):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —É—Å–ª—É–≥"""
    if '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏' not in mini_df.columns or '‚Ññ —É—Å–ª.' not in mini_df.columns:
        return pd.DataFrame()
    
    services_df = mini_df[['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏', '‚Ññ —É—Å–ª.']].copy()
    services_df = services_df.dropna()
    services_df = services_df[services_df['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏'] != "–ò—Ç–æ–≥–æ –ø–æ —É—Å–ª—É–≥–µ:"]
    services_df = services_df.drop_duplicates()
    
    return services_df

def is_column_empty(df, column_name):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç–æ—Ç—ã —Å—Ç–æ–ª–±—Ü–∞"""
    if df.empty or column_name not in df.columns:
        return True
    
    for value in df[column_name]:
        if pd.isna(value):
            continue
        if isinstance(value, str) and value.strip().lower() in ['nan', 'null', '']:
            continue
        return False
    
    return True

def process_excel_files(uploaded_files):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞
    result = pd.DataFrame(columns=[
        '–§–ò–û —Ä–µ–±–µ–Ω–∫–∞', 
        '‚Ññ –ò–ü–ü–°–£', 
        '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏', 
        '–î–∞—Ç–∞ –æ–∫–∞–∑–∞–Ω–∏—è', 
        '–ö–æ–ª-–≤–æ', 
        '–î–æ–ª–∂–Ω–æ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞', 
        '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç'
    ])
    
    total_files = len(uploaded_files)
    
    for file_idx, uploaded_file in enumerate(uploaded_files):
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
            progress_text = f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ {file_idx + 1}/{total_files}: {uploaded_file.name}"
            progress_bar = st.progress(0, text=progress_text)
            
            # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            df = pd.read_excel(uploaded_file)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            progress_bar.progress(0.2, text=f"{progress_text} - –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞")
            
            # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            df.iloc[:, 0] = df.iloc[:, 0].astype(str).str.replace('‚Ññ –ø/–ø', '‚Ññ —É—Å–ª.', regex=False)
            df = df.dropna(axis=1, how='all')
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –§–ò–û —Ä–µ–±–µ–Ω–∫–∞
            child_name = df.iloc[2, 0] if len(df) > 2 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            # –ü–æ–∏—Å–∫ —Ä–∞–∑–¥–µ–ª–æ–≤ "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ"
            find_text = df[df.iloc[:, 0].str.contains('–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ', na=False)]
            
            progress_bar.progress(0.4, text=f"{progress_text} - –ü–æ–∏—Å–∫ —Ä–∞–∑–¥–µ–ª–æ–≤")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
            sections_processed = 0
            total_sections = len(find_text.index)
            
            for i in range(len(find_text.index)):
                try:
                    order_num_df = i
                    end_df = len(df) - 2
                    
                    if df.iloc[find_text.index[i], 0] != '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Å—Ä–æ—á–Ω—ã–µ —É—Å–ª—É–≥–∏':
                        start_index = find_text.index[order_num_df] + 4
                        end_index = find_text.index[order_num_df + 1] - 3 if order_num_df + 1 < len(find_text.index) else end_df
                        numIPPSU = df.iloc[find_text.index[order_num_df] + 1, 2]
                    else:
                        start_index = find_text.index[order_num_df] + 2
                        end_index = end_df
                        numIPPSU = '—Å—Ä–æ—á–Ω—ã–µ —É—Å–ª—É–≥–∏'
                    
                    # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏-–¥–∞—Ç–∞—Ñ—Ä–µ–π–º
                    test = create_mini_df(df, start_index, end_index)
                    
                    if not is_column_empty(test, "‚Ññ —É—Å–ª."):
                        # –°–æ–∑–¥–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —É—Å–ª—É–≥
                        services = create_num_names_services(test)
                        
                        if not services.empty:
                            mapping_dict = services.set_index('‚Ññ —É—Å–ª.')['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏'].to_dict()
                            
                            # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏
                            test['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏'] = test['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏'].fillna(
                                test['‚Ññ —É—Å–ª.'].map(mapping_dict)
                            )
                            
                            # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å NaN –≤ –¥–∞—Ç–µ –æ–∫–∞–∑–∞–Ω–∏—è
                            test = test.dropna(subset=['–î–∞—Ç–∞ –æ–∫–∞–∑–∞–Ω–∏—è'])
                            
                            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                            new_data = pd.DataFrame({
                                '–§–ò–û —Ä–µ–±–µ–Ω–∫–∞': [child_name] * len(test),
                                '‚Ññ –ò–ü–ü–°–£': [numIPPSU] * len(test),
                                '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏': test['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏'],
                                '–î–∞—Ç–∞ –æ–∫–∞–∑–∞–Ω–∏—è': test['–î–∞—Ç–∞ –æ–∫–∞–∑–∞–Ω–∏—è'],
                                '–ö–æ–ª-–≤–æ': test['–ö–æ–ª-–≤–æ'],
                                '–î–æ–ª–∂–Ω–æ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞': test['–î–æ–ª–∂–Ω–æ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞'],
                                '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç': test['–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç']
                            })
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
                            result = pd.concat([result, new_data], ignore_index=True)
                            
                            sections_processed += 1
                    
                except Exception as e:
                    st.warning(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ {i+1} —Ñ–∞–π–ª–∞ {uploaded_file.name}: {str(e)}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤–Ω—É—Ç—Ä–∏ —Ñ–∞–π–ª–∞
                section_progress = 0.4 + (0.4 * (i + 1) / total_sections) if total_sections > 0 else 0.8
                progress_bar.progress(section_progress, text=f"{progress_text} - –†–∞–∑–¥–µ–ª {i+1}/{total_sections}")
            
            progress_bar.progress(1.0, text=f"{progress_text} - –ó–∞–≤–µ—Ä—à–µ–Ω–æ")
            st.success(f"‚úÖ {uploaded_file.name} - –æ–±—Ä–∞–±–æ—Ç–∞–Ω ({sections_processed} —Ä–∞–∑–¥–µ–ª–æ–≤)")
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {uploaded_file.name}: {str(e)}")
    
    return result

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
with st.sidebar:
    st.header("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
    st.markdown("""
    1. **–ó–∞–≥—Ä—É–∑–∏—Ç–µ** Excel —Ñ–∞–π–ª—ã –æ—Ç—á–µ—Ç–æ–≤ –ò–ü–ü–°–£
    2. **–ù–∞–∂–º–∏—Ç–µ** –∫–Ω–æ–ø–∫—É '–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª—ã'
    3. **–°–∫–∞—á–∞–π—Ç–µ** –≥–æ—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    
    **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**
    - .xlsx
    - .xls
    """)
    
    st.header("‚ÑπÔ∏è –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
    st.markdown("""
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –æ—Ç—á–µ—Ç–æ–≤:
    - –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± —É—Å–ª—É–≥–∞—Ö
    - –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤ –µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
    """)

# –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
uploaded_files = st.file_uploader(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –æ—Ç—á–µ—Ç–æ–≤ –ò–ü–ü–°–£",
    type=['xlsx', 'xls'],
    accept_multiple_files=True,
    help="–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"
)

if uploaded_files:
    st.success(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(uploaded_files)}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    with st.expander("üìã –°–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"):
        for i, file in enumerate(uploaded_files):
            file_size = file.size / 1024  # —Ä–∞–∑–º–µ—Ä –≤ KB
            st.write(f"{i+1}. **{file.name}** ({file_size:.1f} KB)")
    
    # –ö–Ω–æ–ø–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if st.button("üöÄ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª—ã", type="primary", use_container_width=True):
        with st.spinner("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª—ã... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"):
            try:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
                result_df = process_excel_files(uploaded_files)
                
                if not result_df.empty:
                    st.balloons()
                    st.success(f"üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: **{len(result_df):,}**")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    col1, col2, col3, col4 = st.columns(4)
                    with col1:
                        st.metric("–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫", f"{len(result_df):,}")
                    with col2:
                        st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–µ—Ç–µ–π", result_df['–§–ò–û —Ä–µ–±–µ–Ω–∫–∞'].nunique())
                    with col3:
                        st.metric("–£—Å–ª—É–≥", result_df['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏'].nunique())
                    with col4:
                        st.metric("–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤", result_df['–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç'].nunique())
                    
                    # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö
                    st.subheader("üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
                    st.dataframe(result_df.head(20), use_container_width=True)
                    
                    # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                    with st.expander("üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"):
                        tab1, tab2, tab3 = st.tabs(["–î–µ—Ç–∏", "–£—Å–ª—É–≥–∏", "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã"])
                        
                        with tab1:
                            st.write("**–ü–æ –¥–µ—Ç—è–º:**")
                            child_stats = result_df['–§–ò–û —Ä–µ–±–µ–Ω–∫–∞'].value_counts()
                            st.dataframe(child_stats)
                        
                        with tab2:
                            st.write("**–ü–æ —É—Å–ª—É–≥–∞–º:**")
                            service_stats = result_df['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏'].value_counts()
                            st.dataframe(service_stats)
                        
                        with tab3:
                            st.write("**–ü–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º:**")
                            specialist_stats = result_df['–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç'].value_counts()
                            st.dataframe(specialist_stats)
                    
                    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    st.subheader("üíæ –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                    
                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞
                    output = io.BytesIO()
                    with pd.ExcelWriter(output, engine='openpyxl') as writer:
                        result_df.to_excel(writer, index=False, sheet_name='–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ')
                    output.seek(0)
                    
                    # –ö–Ω–æ–ø–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                    
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.download_button(
                            label="üì• –°–∫–∞—á–∞—Ç—å –∫–∞–∫ Excel",
                            data=output,
                            file_name=f"–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ_–æ—Ç—á–µ—Ç—ã_–ò–ü–ü–°–£_{timestamp}.xlsx",
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                            use_container_width=True,
                            type="primary"
                        )
                    
                    with col2:
                        csv_data = result_df.to_csv(index=False, encoding='utf-8-sig').encode('utf-8-sig')
                        st.download_button(
                            label="üì• –°–∫–∞—á–∞—Ç—å –∫–∞–∫ CSV",
                            data=csv_data,
                            file_name=f"–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ_–æ—Ç—á–µ—Ç—ã_–ò–ü–ü–°–£_{timestamp}.csv",
                            mime="text/csv",
                            use_container_width=True
                        )
                
                else:
                    st.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–æ–≤.")
                    
            except Exception as e:
                st.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}")

else:
    st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª—ã –æ—Ç—á–µ—Ç–æ–≤ –ò–ü–ü–°–£ –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")

# –§—É—Ç–µ—Ä
st.markdown("---")

st.caption("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç—á–µ—Ç–æ–≤ –ò–ü–ü–°–£ | –°–æ–∑–¥–∞–Ω–æ –Ω–∞ Streamlit")
